# # This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
# #
# # To configure this workflow:
# #
# # 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
# #
# # 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
# #
# # 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
# #
# # For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

# name: Build and Deploy to GKE

# on:
#   push:
#     branches:
#     - develop

# env:
#   PROJECT_ID: ${{ secrets.GKE_PROJECT }}
#   GKE_CLUSTER: react-101   # TODO: update to cluster name
#   GKE_ZONE: asia-southeast2-a   # TODO: update to cluster zone
#   DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
#   IMAGE: static-site

# jobs:
#   setup-build-publish-deploy:
#     name: Setup, Build, Publish, and Deploy
#     runs-on: ubuntu-latest
#     environment: production

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     # Setup gcloud CLI
#     - uses: google-github-actions/setup-gcloud@v0.2.0
#       with:
#         service_account_key: ${{ secrets.GKE_SA_KEY }}
#         project_id: ${{ secrets.GKE_PROJECT }}

#     # Configure Docker to use the gcloud command-line tool as a credential
#     # helper for authentication
#     - run: |-
#         gcloud --quiet auth configure-docker

#     # Get the GKE credentials so we can deploy to the cluster
#     - uses: google-github-actions/get-gke-credentials@v0.2.1
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#         credentials: ${{ secrets.GKE_SA_KEY }}

#     # Build the Docker image
#     - name: Build
#       run: |-
#         docker build \
#           --tag "gcr.io/${{ env.PROJECT_ID }}/$IMAGE:$GITHUB_SHA" \
#           --build-arg GITHUB_SHA="$GITHUB_SHA" \
#           --build-arg GITHUB_REF="$GITHUB_REF" \
#           .

#     # Push the Docker image to Google Container Registry
#     - name: Publish
#       run: |-
#         docker push "gcr.io/${{ env.PROJECT_ID }}/$IMAGE:$GITHUB_SHA"

# name: publish

# on: [push]

# env:
#   PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Setup Cloud SDK
#       uses: Noraluk/react-101@develop
#       with:
#         project_id: ${{ env.PROJECT_ID }}
#         service_account_key: ${{ secrets.GCP_SA_KEY }}

#     - name: Authorize Docker push
#       run: gcloud auth configure-docker

name: deploy-cloudrun Credentials Integration

on:
  push:
    branches:
    - 'develop'
  pull_request:

jobs:
  gcloud:
    name: with setup-gcloud
    if: ${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
    - id: service
      run: echo ::set-output name=service::run-gcloud-$GITHUB_SHA
    - uses: actions/checkout@v2
    - uses: actions/setup-node@master
      with:
        node-version: 12.x
    - run: |-
        npm ci
        npm run build
    - name: Set up authentication
      uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_B64 }}
        export_default_credentials: true

    - id: deploy
      uses: ./
      with:
        image: gcr.io/cloudrun/hello
        service: ${{ steps.service.outputs.service }}

    - name: Integration Tests
      run: npm run e2e-tests
      env:
        URL: ${{ steps.deploy.outputs.url }}

  b64_json:
    name: with base64 creds
    if: ${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
    - id: service
      run: echo ::set-output name=service::run-b64-$GITHUB_SHA
    - uses: actions/checkout@v2
    - uses: actions/setup-node@master
      with:
        node-version: 12.x
    - run: |-
        npm ci
        npm run build
    - id: deploy
      uses: ./
      with:
        credentials: ${{ secrets.GCP_SA_KEY_B64 }}
        image: gcr.io/cloudrun/hello
        service: ${{ steps.service.outputs.service }}

    - uses: google-github-actions/setup-gcloud@master # Set up ADC to make authenticated request to service
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_B64 }}
        export_default_credentials: true

    - name: Integration Tests
      run: npm run e2e-tests
      env:
        URL: ${{ steps.deploy.outputs.url }}

  json:
    name: with json creds
    if: ${{ github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name && github.actor != 'dependabot[bot]' }}
    runs-on: ubuntu-latest
    steps:
    - id: service
      run: echo ::set-output name=service::run-json-$GITHUB_SHA
    - uses: actions/checkout@v2
    - uses: actions/setup-node@master
      with:
        node-version: 12.x
    - run: |-
        npm ci
        npm run build
    - id: deploy
      uses: ./
      with:
        credentials: ${{ secrets.DEPLOY_CLOUDRUN_SA_KEY_JSON }}
        image: gcr.io/cloudrun/hello
        service: ${{ steps.service.outputs.service }}

    - uses: google-github-actions/setup-gcloud@master # Set up ADC to make authenticated request to service
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_B64 }}
        export_default_credentials: true

    - name: Integration Tests
      run: npm run e2e-tests
      env:
        URL: ${{ steps.deploy.outputs.url }}

  cleanup:
    name: Clean Up
    if: ${{ (github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name && github.actor != 'dependabot[bot]') && always() }}
    runs-on: ubuntu-latest
    needs: [json, gcloud, b64_json]
    steps:
    - uses: google-github-actions/setup-gcloud@master
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY_B64 }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Delete services
      run: |-
        gcloud config set run/platform managed
        gcloud config set run/region us-central1
        gcloud run services delete run-json-$GITHUB_SHA --quiet
        gcloud run services delete run-b64-$GITHUB_SHA --quiet
        gcloud run services delete run-gcloud-$GITHUB_SHA --quiet